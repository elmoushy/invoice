// i need when i click on 381 - Credit Note and select invoice_id from last invoices list then fill the all inputs of this  (Invoice_Details.vue , Seller_Details.vue , Buyer_Details.vue and  Document_Totals.vue) pages file by it 


// as you see this file pages ( CreateInvoiceLayout.vue , Invoice_Details.vue , Seller_Details.vue , Buyer_Details.vue and  Document_Totals.vue ) control the insert of new invoice but i have a special case need to implement it details:
// if Invoice Type Code in file  Invoice_Details.vue  = 381 - Credit Note then show new <input/> list called last invoices come from this api "/api/listinvoice/cases"
// the shape of response like this 
// {
//     "status": 200,
//     "data": [
//         {
//             "invoice_id": 5,
//             "invoice_number": "INV-2025-001"
//         }
//     ]
// }

// and if i select for example "invoice_id": 5 then call api/invoice/5 
// the response shape 
// {
//     "status": 200,
//     "data": {
//         "invoice_id": 5,
//         "invoice_number": "INV-2025-001",
//         "invoice_issue_date": "2025-04-07",
//         "invoice_type_code": "380",
//         "invoice_currency_code": "AED",
//         "payment_currency_code": null,
//         "tax_registration_identifier": null,
//         "invoice_total_line_net_amount": "138740.00",
//         "invoice_total_tax_amount": "6937.00",
//         "invoice_total_with_tax": "145677.00",
//         "invoice_due_for_payment": "145677.00",
//         "payment_due_date": null,
//         "business_process_type": "urn:peppol:bis:billing-1",
//         "specification_identifier": "urn:peppol:printbilling-1@ae-1",
//         "currency_exchange_rate": null,
//         "invoice_total_tax_amount_acc_currency": "0.00",
//         "status": "Draft",
//         "seller_id": 1,
//         "principal_id": null,
//         "beneficiary_id": "312121221",
//         "summary_invoice_start_date": "2025-04-08",
//         "summary_invoice_end_date": "2025-04-18",
//         "buyer_id": 1,
//         "created_at": "2025-04-07T08:14:41.000000Z",
//         "updated_at": "2025-04-07T08:23:48.000000Z",
//         "invoice_transaction_type_code": "10110010",
//         "contract_reference": null,
//         "contract_value": null,
//         "billing_frequency": null,
//         "invoice_note": null,
//         "scheme_identifier": null,
//         "deliver_to_address_line_1": "4 1street",
//         "deliver_to_address_line_2": null,
//         "deliver_to_address_line_3": null,
//         "deliver_to_post_code": "11865",
//         "deliver_to_country_code": "AE",
//         "deliver_to_country_subdivision": "AUH",
//         "deliver_to_city": "Abu Dhabi",
//         "deliver_to_party_name": null,
//         "deliver_to_location_identifier": "AE-AUH-12345",
//         "location_scheme_identifier": "0088",
//         "actual_delivery_date": "2025-04-07",
//         "seller": {
//             "seller_id": 1,
//             "seller_name": "seif",
//             "seller_tax_identifier": null,
//             "legal_identifier": "12212212",
//             "electronic_address": "seif@gmail.com",
//             "address_line1": "street",
//             "seller_postal_address": "street, Abu Dhabi, AE, AUH",
//             "city": "Abu Dhabi",
//             "country_code": "AE",
//             "country_subdivision": "AUH",
//             "seller_legal_registration_type": "Trade License",
//             "authority_name": "Department of Economic Development (DED)",
//             "passport_issuing_country_code": null,
//             "scheme_identifier": "0235",
//             "scheme_identifier_electronic_address": "EM",
//             "created_at": "2025-04-07T08:01:37.000000Z",
//             "updated_at": "2025-04-07T08:01:37.000000Z"
//         },
//         "buyer": {
//             "buyer_id": 1,
//             "buyer_name": "amr",
//             "buyer_tax_identifier": "14739267392503",
//             "legal_identifier": null,
//             "electronic_address": "Amr@gmail.com",
//             "address_line1": "street 2",
//             "city": "Abu Dhabi",
//             "country_code": "AE",
//             "country_subdivision": "AUH",
//             "seller_postal_address": "street 2, Abu Dhabi, AE, AUH",
//             "buyer_legal_registration_type": "Cabinet Decision Number",
//             "authority_code": "UAE Government or specific ministry responsible for the regulation",
//             "buyer_passport_issuing_country": null,
//             "scheme_identifier_electronic_address": "EM",
//             "scheme_identifier": "CD",
//             "created_at": "2025-04-07T08:03:12.000000Z",
//             "updated_at": "2025-04-07T08:03:12.000000Z"
//         },
//         "lines": [
//             {
//                 "line_id": 6,
//                 "invoice_id": 5,
//                 "invoice_line_identifier": "1",
//                 "invoiced_quantity": "7.00",
//                 "invoiced_quantity_unit_code": "KG",
//                 "item_net_price": "19820.00",
//                 "item_gross_price": "19920.00",
//                 "item_description": "good",
//                 "item_classification": "HG",
//                 "invoice_line_net_amount": "138740.00",
//                 "discount_value": "100.00",
//                 "invoiced_item_tax_category_code": "standard_rate",
//                 "item_price_base_quantity": "1.00",
//                 "invoiced_item_tax_rate": "5.00",
//                 "item_name": "laptops",
//                 "vat_line_amount": "6937.00",
//                 "item_type": "Goods",
//                 "classification_scheme_identifier": "212212",
//                 "sac_scheme_identifier": null,
//                 "created_at": "2025-04-07T08:23:48.000000Z",
//                 "updated_at": "2025-04-07T08:23:48.000000Z",
//                 "tax_exemption_reason": null,
//                 "tax_exemption_reason_code": null,
//                 "scheme_idenifier_IBT_157_1": null,
//                 "Item_Standard_Identifier": null,
//                 "discount_type": "static"
//             }
//         ],
//         "tax_breakdowns": [
//             {
//                 "tax_id": 6,
//                 "invoice_id": 5,
//                 "tax_category_code": "standard_rate",
//                 "tax_category_rate": "5.00",
//                 "taxable_amount": "138740.00",
//                 "tax_amount": "6937.00",
//                 "created_at": "2025-04-07T08:23:48.000000Z",
//                 "updated_at": "2025-04-07T08:23:48.000000Z"
//             }
//         ],
//         "payments": [
//             {
//                 "payment_id": 4,
//                 "invoice_id": 5,
//                 "payment_date": "2025-04-07",
//                 "credit_transfer": null,
//                 "payment_means_type_code": "97",
//                 "payment_account_identifier": null,
//                 "paid_amount": "0.00",
//                 "rounding_amount": "0.00",
//                 "amount_due_for_payment": null,
//                 "scheme_identifier": null,
//                 "payment_service_provider_identifier": null,
//                 "payment_account_name": null,
//                 "payment_service_provider_id": null,
//                 "payment_card_number": null,
//                 "created_at": "2025-04-07T08:23:48.000000Z",
//                 "updated_at": "2025-04-07T08:23:48.000000Z",
//                 "payment_card_primary_account_number": null,
//                 "expiry_date": null
//             }
//         ]
//     }
// }





// CreateInvoiceLayout.vue
// <template>
//   <div class="page-wrapper">
//     <div class="main-layout">
//       <TheNav />
//       <div class="content-wrapper">
//         <div class="invoice-card">
//           <!-- Invoice Header -->
//           <div class="card-header">
//             <div class="header-content">
//               <i class="fas fa-file-invoice header-icon"></i>
//               <h1 v-if="isEditMode">Edit Invoice #{{ currentInvoiceId }}</h1>
//               <h1 v-else>Create New Invoice</h1>
//             </div>
//           </div>

//           <!-- Modern Action Bar -->
//           <div class="action-bar">
//             <div class="dropdown-container">
//               <div class="select-wrapper">
//               </div>
//             </div>
//             <div class="action-buttons">
//               <div v-if="isLastStep" class="draft-save" @click="handleSubmit('draft')">
//                 <span>{{ isEditMode ? 'UPDATE AS DRAFT' : 'SAVE AS A DRAFT' }}</span>
//               </div>
//               <button class="next-button" @click="handleNextOrSubmit">
//                 <span v-if="!isLastStep">NEXT</span>
//                 <span v-else>{{ isEditMode ? 'UPDATE' : 'SAVE' }}</span>
//               </button>
//             </div>
//           </div>

//           <!-- Render the child route once data is loaded -->
//           <template v-if="!loading">
//             <router-view></router-view>
//           </template>
//           <!-- Loading Spinner -->
//           <div v-else style="padding: 2rem;">
//             <h2>Loading invoice data...</h2>
//           </div>
//         </div>
//       </div>
//     </div>
//   </div>
// </template>

// <script>
// import TheNav from './TheNav.vue'
// import { useInvoiceStore } from '../invoice'
// import Swal from 'sweetalert2'
// import axios from 'axios'

// export default {
//   name: 'CreateInvoiceLayout',
//   components: { TheNav },

//   data() {
//     return {
//       invoiceStore: null,
//       isEditMode: false,
//       currentInvoiceId: null,
//       loading: false,
//       selectedCase: 1 // Default to Case 1
//     }
//   },

//   computed: {
//     // Determine if we are on the last step in the wizard
//     isLastStep() {
//       const menuItems = this.getWizardMenuItems()
//       const currentIndex = menuItems.findIndex(item =>
//         this.$route.path.includes(item.route)
//       )
//       return currentIndex === menuItems.length - 1
//     },
//     invoiceData() {
//       return this.invoiceStore.invoiceData
//     }
//   },

//   async created() {
//     this.invoiceStore = useInvoiceStore()
//     this.currentInvoiceId = this.$route.params.id || null
//     this.isEditMode = !!this.currentInvoiceId

//     // In edit mode, load the invoice data once
//     if (this.isEditMode) {
//       this.loading = true
//       try {
//         await this.invoiceStore.loadInvoiceForEdit(this.currentInvoiceId)
//       } catch (error) {
//         console.error('Error loading invoice for edit:', error)
//         Swal.fire({
//           icon: 'error',
//           title: 'Error',
//           text: 'Could not load the invoice data.'
//         }).then(() => {
//           this.$router.push({ name: 'AllInvoices' })
//         })
//       } finally {
//         this.loading = false
//       }
//     }
//   },

//   watch: {
//     // When the selected case changes (and not in edit mode),
//     // navigate to the first step of the new case.
//     selectedCase(newVal) {
//       if (!this.isEditMode) {
//         const menuItems = this.getWizardMenuItems()
//         this.$router.push(menuItems[0].path)
//       }
//     }
//   },

//   beforeRouteUpdate: async function(to, from, next) {
//     // If invoice ID changes in edit mode, reset and load new invoice data
//     if (this.isEditMode && to.params.id && to.params.id !== this.currentInvoiceId) {
//       this.loading = true
//       try {
//         this.invoiceStore.resetInvoiceData()
//         this.currentInvoiceId = to.params.id
//         await this.invoiceStore.loadInvoiceForEdit(to.params.id)
//         this.loading = false
//         next()
//       } catch (err) {
//         console.error('Error re-loading invoice in beforeRouteUpdate:', err)
//         this.loading = false
//         next({ name: 'AllInvoices' })
//       }
//     } else {
//       next()
//     }
//   },

//   methods: {
//     // Build wizard menu items dynamically based on the selected case
//     getWizardMenuItems() {
//       let basePath
//       if (this.isEditMode) {
//         basePath = `/invoice/${this.currentInvoiceId}/edit`
//       } else {
//         // For Case 1 use the original path; for others use a modified base path
//         basePath = this.selectedCase === 1 ? '/create-invoice' : `/create-invoice${this.selectedCase}`
//       }
//       // For cases other than 1, add a prefix for the child routes (e.g., case2_invoice-details)
//       const prefix = this.selectedCase === 1 ? '' : `case${this.selectedCase}_`
//       return [
//         { text: 'Invoice Details', route: 'invoice-details', path: `${basePath}/${prefix}invoice-details` },
//         { text: 'Seller Details',  route: 'seller-details',  path: `${basePath}/${prefix}seller-details` },
//         { text: 'Buyer Details',   route: 'buyer-details',   path: `${basePath}/${prefix}buyer-details` },
//         { text: 'Document Totals', route: 'document-totals', path: `${basePath}/${prefix}document-totals` }
//       ]
//     },

//     handleCaseChange() {
//       // Optional: additional logic when case is changed
//       console.log('Selected case:', this.selectedCase)
//     },

//     handleNextOrSubmit() {
//       if (!this.isLastStep) {
//         this.nextStep()
//       } else {
//         this.handleSubmit('final')
//       }
//     },

//     nextStep() {
//       const menuItems = this.getWizardMenuItems()
//       const currentIndex = menuItems.findIndex(item =>
//         this.$route.path.includes(item.route)
//       )
//       if (currentIndex < menuItems.length - 1) {
//         const nextItem = menuItems[currentIndex + 1]
//         this.$router.push(nextItem.path)
//       }
//     },

//     handleSubmit(mode) {
//       // 1) Clone the invoice data
//       const payload = JSON.parse(JSON.stringify(this.invoiceData))

//       // 2) Ensure invoice_lines is an array
//       if (!Array.isArray(payload.invoice_lines)) {
//         payload.invoice_lines = []
//       }

//       // 3) Build tax_breakdowns from invoice_lines
//       const taxMap = {}
//       payload.invoice_lines.forEach(line => {
//         const code = line.invoiced_item_tax_category_code
//         if (!code) return
//         if (!taxMap[code]) {
//           taxMap[code] = {
//             tax_category_code: code,
//             tax_category_rate: parseFloat(line.invoiced_item_tax_rate) || 0,
//             taxable_amount: 0
//           }
//         }
//         taxMap[code].taxable_amount += parseFloat(line.invoice_line_net_amount) || 0
//       })
//       payload.tax_breakdowns = Object.values(taxMap).map(item => ({
//         tax_category_code: item.tax_category_code,
//         tax_category_rate: item.tax_category_rate,
//         taxable_amount: item.taxable_amount,
//         tax_amount: (item.taxable_amount * item.tax_category_rate) / 100
//       }))

//       // 4) Compute totals
//       const totalLineNet = payload.invoice_lines.reduce((sum, line) => {
//         return sum + (parseFloat(line.invoice_line_net_amount) || 0)
//       }, 0)
//       const totalTax = payload.tax_breakdowns.reduce((sum, tb) => {
//         return sum + (parseFloat(tb.tax_amount) || 0)
//       }, 0)
//       payload.invoice_total_line_net_amount = totalLineNet
//       payload.invoice_total_tax_amount = totalTax
//       payload.invoice_total_with_tax = totalLineNet + totalTax

//       const paid = parseFloat(payload.paid_amount) || 0
//       const rounding = parseFloat(payload.rounding_amount) || 0
//       payload.invoice_due_for_payment = payload.invoice_total_with_tax - paid + rounding

//       // 5) Build payment_details if missing
//       if (
//         !payload.payment_details ||
//         !Array.isArray(payload.payment_details) ||
//         payload.payment_details.length === 0
//       ) {
//         payload.payment_details = [
//           {
//             payment_means_type_code: payload.payment_means_type_code || '',
//             payment_account_identifier: payload.payment_account_identifier || '',
//             paid_amount: parseFloat(payload.paid_amount) || 0,
//             rounding_amount: parseFloat(payload.rounding_amount) || 0,
//             payment_date: payload.payment_date || ''
//           }
//         ]
//       }

//       // 6) Remove top-level payment fields
//       delete payload.payment_means_type_code
//       delete payload.payment_account_identifier
//       delete payload.paid_amount
//       delete payload.rounding_amount
//       delete payload.payment_date

//       // Must have at least one tax category
//       if (!payload.tax_breakdowns || payload.tax_breakdowns.length === 0) {
//         Swal.fire({
//           icon: 'error',
//           title: 'Error',
//           text: 'Please add at least one invoice line with a valid tax category.'
//         })
//         return
//       }

//       // 7) Create vs. update logic
//       if (this.isEditMode) {
//         axios
//           .put(`/api/invoice/${this.currentInvoiceId}`, payload)
//           .then(() => {
//             Swal.fire({
//               icon: 'success',
//               title: 'Success',
//               text: 'Invoice updated successfully!'
//             }).then(() => {
//               this.$router.push({
//                 name: 'InvoicePreview',
//                 params: { id: this.currentInvoiceId }
//               })
//             })
//           })
//           .catch(error => {
//             let errorMessage = 'An error occurred while updating the invoice.'
//             if (error.response?.data?.message) {
//               errorMessage = error.response.data.message
//             }
//             Swal.fire({
//               icon: 'error',
//               title: 'Error',
//               text: errorMessage
//             })
//           })
//       } else {
//         axios
//           .post('/api/invoice', payload)
//           .then(response => {
//             Swal.fire({
//               icon: 'success',
//               title: 'Success',
//               text: 'Invoice created successfully!'
//             }).then(() => {
//               const newInvoiceId = response.data.data.invoice_id
//               this.$router.push({ name: 'InvoicePreview', params: { id: newInvoiceId } })
//             })
//           })
//           .catch(error => {
//             let errorMessage = 'An error occurred while saving the invoice.'
//             if (error.response?.data?.message) {
//               errorMessage = error.response.data.message
//             }
//             Swal.fire({
//               icon: 'error',
//               title: 'Error',
//               text: errorMessage
//             })
//           })
//       }
//     }
//   }
// }
// </script>


// Invoice_Details.vue
// <template>
//   <div class="container">
//     <div class="sections-grid">

//       <div class="section invoice-details animate-in">
//         <h3><span class="icon">🧾</span> Invoice Details</h3>
//         <form>
//           <!-- Row: Invoice Transaction Types -->
//           <div class="form-row full-width">
//             <label class="form-label">Invoice Transaction Types</label>
//             <div class="transaction-types-grid">
//               <div 
//                 v-for="(option, index) in transactionTypes" 
//                 :key="index" 
//                 class="transaction-type-item"
//               >
//                 <label class="toggle-switch">
//                   <input
//                     type="checkbox"
//                     v-model="option.selected"
//                     :disabled="isRestrictedInvoiceType && restrictedTransactionTypes.includes(option.label)"
//                     @change="updateInvoiceTransactionTypeCode"
//                   />
//                   <span class="toggle-slider"></span>
//                   <span class="toggle-label">{{ option.label }}</span>
//                 </label>
//               </div>
//             </div>
//           </div>

//           <div class="invoice-details-grid">
//             <!-- Row 1: Two fields side by side -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Invoice Issue Date</label>
//                 <input
//                   type="date"
//                   v-model="invoiceData.invoice_issue_date"
//                   class="form-control"
//                 />
//               </div>
//               <div class="form-row">
//                 <label class="form-label">Invoice Type Code</label>
//                 <select
//                   v-model="invoiceData.invoice_type_code"
//                   class="form-select"
//                   @change="updateBusinessProcessType"
//                 >
//                   <option value="" disabled>Select Invoice Type</option>
//                   <option value="380">380 - Standard Invoice</option>
//                   <option value="381">381 - Credit Note</option>
//                   <option value="384">384 - Corrected Invoice</option>
//                   <option value="386">386 - Prepayment Invoice</option>
//                   <option value="396">396 - Factored Invoice</option>
//                   <option value="Out of scope of tax">Out of scope of tax</option>
//                 </select>
//               </div>
//             </div>

//             <!-- Show "Last Invoices" dropdown if type code === 381 (Credit Note) -->
//             <div v-if="invoiceData.invoice_type_code === '381'">
//               <label class="form-label">Select Last Invoice to Credit</label>
//               <select
//                 class="form-select"
//                 v-model="selectedCreditNoteRefInvoice"
//                 @change="onSelectCreditNoteRefInvoice"
//               >
//                 <option value="" disabled>Select Invoice</option>
//                 <option
//                   v-for="item in lastInvoices"
//                   :key="item.invoice_id"
//                   :value="item.invoice_id"
//                 >
//                   {{ item.invoice_number }} (ID: {{ item.invoice_id }})
//                 </option>
//               </select>
//             </div>

//             <!-- Row 2: Currency fields side by side -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Invoice Currency Code</label>
//                 <select
//                   v-model="invoiceData.invoice_currency_code"
//                   class="form-select"
//                   @change="fetchExchangeRate"
//                 >
//                   <option value="" disabled>Select Currency</option>
//                   <option v-for="currency in currencies" :key="currency" :value="currency">
//                     {{ currency }}
//                   </option>
//                 </select>
//               </div>
//               <transition name="slide-fade">
//                 <div
//                   class="form-row"
//                   v-if="
//                     invoiceData.invoice_currency_code &&
//                     invoiceData.invoice_currency_code !== 'AED'
//                   "
//                 >
//                   <label class="form-label">Tax accounting currency</label>
//                   <div class="readonly-field">
//                     <input
//                       type="text"
//                       value="AED"
//                       class="form-control readonly"
//                       readonly
//                       @input="invoiceData.payment_currency_code = 'AED'"
//                     />
//                     <span class="readonly-badge">Required by law</span>
//                   </div>
//                   <input type="hidden" v-model="invoiceData.payment_currency_code" />
//                 </div>
//               </transition>
//             </div>

//             <!-- Currency Exchange Rate -->
//             <transition name="slide-fade">
//               <div
//                 class="form-row-group"
//                 v-if="
//                   invoiceData.invoice_currency_code &&
//                   invoiceData.invoice_currency_code !== 'AED'
//                 "
//               >
//                 <div class="form-row full-width">
//                   <label class="form-label">Currency Exchange Rate</label>
//                   <div class="exchange-rate-info">
//                     <span class="exchange-rate-formula">
//                       3.6 {{ invoiceData.exchange_rate }} AED =
//                       1 {{ invoiceData.invoice_currency_code }}
//                     </span>
//                     <span
//                       class="exchange-rate-badge"
//                       :class="{'is-loading': isLoadingRate}"
//                     >
//                       {{ isLoadingRate ? 'Updating...' : (' Last updated: ' + lastUpdated) }}
//                     </span>
//                   </div>
//                 </div>
//               </div>
//             </transition>

//             <!-- Row 3: Specification + Business Process -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Specification Identifier</label>
//                 <div class="readonly-field">
//                   <input
//                     type="text"
//                     class="form-control readonly"
//                     readonly
//                     :value="invoiceData.specification_identifier"
//                   />
//                   <span class="readonly-badge">Fixed value</span>
//                   <input
//                     type="hidden"
//                     v-model="invoiceData.specification_identifier"
//                     value="urn:peppol:printbilling-1@ae-1"
//                   />
//                 </div>
//               </div>
//               <div class="form-row">
//                 <label class="form-label">Business Process Type</label>
//                 <div class="readonly-field">
//                   <input
//                     type="text"
//                     v-model="invoiceData.business_process_type"
//                     class="form-control readonly"
//                     readonly
//                     placeholder="Will be set based on invoice type"
//                   />
//                   <span class="readonly-badge" v-if="invoiceData.invoice_type_code">Auto-generated</span>
//                 </div>
//               </div>
//             </div>

//             <!-- Summary Invoice date range fields -->
//             <transition name="slide-fade">
//               <div class="form-row-group" v-if="transactionTypes[3].selected">
//                 <div class="form-row">
//                   <label class="form-label">Summary Invoice Start Date</label>
//                   <input
//                     type="date"
//                     v-model="invoiceData.summary_invoice_start_date"
//                     class="form-control"
//                   />
//                 </div>
//                 <div class="form-row">
//                   <label class="form-label">Summary Invoice End Date</label>
//                   <input
//                     type="date"
//                     v-model="invoiceData.summary_invoice_end_date"
//                     class="form-control"
//                   />
//                 </div>
//               </div>
//             </transition>

//             <!-- Continuous Supply Fields -->
//             <transition name="slide-fade">
//               <div class="form-row-group" v-if="transactionTypes[4].selected">
//                 <div class="form-row">
//                   <label class="form-label">Contract Reference</label>
//                   <input
//                     type="text"
//                     v-model="invoiceData.contract_reference"
//                     class="form-control"
//                     placeholder="Optional"
//                   />
//                   <small class="form-text">Optional field if needed</small>
//                 </div>
//                 <div class="form-row">
//                   <label class="form-label">Contract Value</label>
//                   <input
//                     type="number"
//                     v-model="invoiceData.contract_value"
//                     class="form-control"
//                     placeholder="Optional"
//                     step="0.01"
//                   />
//                   <small class="form-text">Optional field if needed</small>
//                 </div>
//               </div>
//             </transition>

//             <transition name="slide-fade">
//               <div class="form-row-group" v-if="transactionTypes[4].selected">
//                 <div class="form-row">
//                   <label class="form-label">Frequency of Billing</label>
//                   <select
//                     v-model="invoiceData.billing_frequency"
//                     class="form-select"
//                   >
//                     <option value="" disabled>Select Frequency</option>
//                     <option value="daily">Daily</option>
//                     <option value="weekly">Weekly</option>
//                     <option value="monthly">Monthly</option>
//                     <option value="quarterly">Quarterly</option>
//                     <option value="others">Others</option>
//                   </select>
//                 </div>
//                 <div class="form-row">
//                   <label class="form-label">
//                     Invoice Note
//                     <span v-if="invoiceData.billing_frequency === 'others'" class="required-marker">*</span>
//                   </label>
//                   <input
//                     type="text"
//                     v-model="invoiceData.invoice_note"
//                     class="form-control"
//                     :placeholder="invoiceData.billing_frequency === 'others' ? 'Required' : 'Optional'"
//                     :required="invoiceData.billing_frequency === 'others'"
//                   />
//                   <small class="form-text" :class="{'text-required': invoiceData.billing_frequency === 'others'}">
//                     {{ invoiceData.billing_frequency === 'others' ? 'Required field' : 'Optional field' }}
//                   </small>
//                 </div>
//               </div>
//             </transition>

//             <!-- Free Trade Zone Fields -->
//             <transition name="slide-fade">
//               <div class="form-row-group" v-if="transactionTypes[0].selected">
//                 <div class="form-row full-width">
//                   <label class="form-label">
//                     Beneficiary ID <span class="required-marker">*</span>
//                   </label>
//                   <input
//                     type="text"
//                     v-model="invoiceData.beneficiary_id"
//                     class="form-control"
//                     placeholder="Enter Beneficiary ID"
//                     required
//                   />
//                   <small class="form-text text-required">Required for Free Trade Zone transactions</small>
//                 </div>
//               </div>
//             </transition>
//           </div>
//         </form>
//       </div>

//       <div class="section transaction-e-commerce animate-in" v-if="transactionTypes[6].selected">
//         <h3><span class="icon">🧾</span> e-commerce</h3>
//         <form>
//           <div class="invoice-details-grid">
//             <!-- Row 1 -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Deliver to address line 1</label>
//                 <input type="text" v-model="invoiceData.deliver_to_address_line_1" class="form-control" />
//                 <div class="address-toggle" @click="showAddressLine2 = !showAddressLine2">
//                   <span class="toggle-icon">{{ showAddressLine2 ? '−' : '+' }}</span>
//                   <span class="toggle-text">
//                     {{ showAddressLine2 ? 'Hide additional address lines' : 'Add more address details' }}
//                   </span>
//                 </div>
//               </div>
//               <div class="form-row" v-show="showAddressLine2">
//                 <label class="form-label">Deliver to address line 2</label>
//                 <input type="text" v-model="invoiceData.deliver_to_address_line_2" class="form-control" />
//               </div>
//             </div>

//             <!-- Row 2 -->
//             <div class="form-row-group" v-show="showAddressLine2">
//               <div class="form-row">
//                 <label class="form-label">Deliver to address line 3</label>
//                 <input type="text" v-model="invoiceData.deliver_to_address_line_3" class="form-control" />
//               </div>
//               <div class="form-row">
//                 <label class="form-label">Deliver to country code</label>
//                 <select v-model="invoiceData.deliver_to_country_code" class="form-select">
//                   <option value="" disabled>Select Country</option>
//                   <option v-for="country in countries" :key="country.code" :value="country.code">
//                     {{ country.code }} - {{ country.name }}
//                   </option>
//                 </select>
//               </div>
//             </div>

//             <!-- Post code field when address lines are hidden -->
//             <div class="form-row-group" v-show="!showAddressLine2">
//               <div class="form-row full-width">
//                 <label class="form-label">Deliver to country code</label>
//                 <select v-model="invoiceData.deliver_to_country_code" class="form-select">
//                   <option value="" disabled>Select Country</option>
//                   <option v-for="country in countries" :key="country.code" :value="country.code">
//                     {{ country.code }} - {{ country.name }}
//                   </option>
//                 </select>
//               </div>
//             </div>

//             <!-- Row 3 -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Deliver to country subdivision</label>
//                 <select v-model="invoiceData.deliver_to_country_subdivision" class="form-select">
//                   <option value="" disabled>Select Subdivision</option>
//                   <option v-for="region in selectedSubdivisions" :key="region.code" :value="region.code">
//                     {{ region.code }} - {{ region.name }}
//                   </option>
//                 </select>
//               </div>
//               <div class="form-row">
//                 <label class="form-label">Deliver to post code</label>
//                 <input type="text" v-model="invoiceData.deliver_to_post_code" class="form-control" />
//               </div>
//             </div>

//             <!-- Row 4 -->
//             <div class="form-row-group">
//               <div class="form-row">
//                 <label class="form-label">Deliver to city</label>
//                 <input type="text" v-model="invoiceData.deliver_to_city" class="form-control" />
//               </div>
//               <div class="form-row">
//                 <label class="form-label">Deliver to party name</label>
//                 <input type="text" v-model="invoiceData.deliver_to_party_name" class="form-control" />
//               </div>
//             </div>

//             <!-- Row 6 -->
//             <div class="form-row-group">
//               <div class="form-row full-width">
//                 <label class="form-label">Actual delivery date</label>
//                 <input type="date" v-model="invoiceData.actual_delivery_date" class="form-control" />
//               </div>
//             </div>
//           </div>
//         </form>
//       </div>

//     </div>
//   </div>
// </template>

// <script>
// import { ref, computed, watch } from 'vue'
// import { storeToRefs } from 'pinia'
// import axios from 'axios'
// import { useInvoiceStore } from '../invoice'
// import {
//   emirates,
//   saudiRegions,
//   usStates,
//   ukSubdivisions,
//   franceRegions,
//   germanStates,
//   indianSubdivisions,
//   chinaSubdivisions,
//   japanPrefectures,
//   countries
// } from './subdivisions.js'

// export default {
//   name: 'InvoiceDetails',
//   data() {
//     return {
//       isEditMode: false,
//       currentInvoiceId: null,
//       // The array controlling transaction type toggles:
//       transactionTypes: [
//         { label: 'Free Trade Zone', selected: false },
//         { label: 'Deemed Supply', selected: false },
//         { label: 'Margin Scheme', selected: false },
//         { label: 'Summary Invoice', selected: false },
//         { label: 'Continuous Supply', selected: false },
//         { label: 'Disclosed Agent Billing', selected: false },
//         { label: 'Supply through E-commerce', selected: false },
//         { label: 'Exports', selected: false }
//       ],
//       showAddressLine2: false,
//       showAddressLine3: false
//     }
//   },
//   setup() {
//     const invoiceStore = useInvoiceStore()
//     const { invoiceData } = storeToRefs(invoiceStore)
//     // For currency exchange rate loading status
//     const isLoadingRate = ref(false)
//     const lastUpdated = ref('')
//     const currencies = ['AED', 'USD', 'EUR']

//     // -------------------------------------------------
//     //  NEW: "Last Invoices" logic for Credit Note (381)
//     // -------------------------------------------------
//     const lastInvoices = ref([])
//     const selectedCreditNoteRefInvoice = ref('')

//     // Fetch the list of "last invoices" from your backend
//     const fetchLastInvoices = async () => {
//       try {
//         const response = await axios.get('/api/listinvoice/cases')
//         lastInvoices.value = response.data?.data || []
//       } catch (err) {
//         console.error('Error fetching last invoices:', err)
//       }
//     }

//     // Whenever user picks an invoice to reference, fetch details & patch
//     const onSelectCreditNoteRefInvoice = async () => {
//       if (!selectedCreditNoteRefInvoice.value) return
//       try {
//         const response = await axios.get(`/api/invoice/${selectedCreditNoteRefInvoice.value}`)
//         const oldInvoiceData = response.data?.data
//         console.log('Patching invoice data from existing invoice:', oldInvoiceData)
//         if (oldInvoiceData) {
//           patchInvoiceDataFromExisting(oldInvoiceData)
//         }
//       } catch (err) {
//         console.error('Error loading referenced invoice:', err)
//       }
//     }

//     // This copies the old invoice data into our new credit note using Option 1 with extra mapping
//     const patchInvoiceDataFromExisting = (oldData) => {
//       // Exclude invoice_type_code, lines, payments, buyer, and seller from the merge
//       const { invoice_type_code, lines, payments, buyer, seller, ...rest } = oldData
//       // Merge all other fields into invoiceData
//       invoiceData.value = { ...invoiceData.value, ...rest }
//       // Map backend keys to our keys
//       invoiceData.value.invoice_lines = lines || []
//       invoiceData.value.payment_details = payments || []
//       // If buyer_id is missing at top level, check the nested buyer object
//       if (!invoiceData.value.buyer_id && buyer && buyer.buyer_id) {
//         invoiceData.value.buyer_id = buyer.buyer_id
//       }
//       // Similarly for seller_id
//       if (!invoiceData.value.seller_id && seller && seller.seller_id) {
//         invoiceData.value.seller_id = seller.seller_id
//       }
//       // Force business process type for Credit Note
//       invoiceData.value.business_process_type = 'urn:peppol:bis:creditnote-1'
//     }

//     // Watch if the user changes invoice_type_code to "381", then fetch the "last invoices"
//     watch(
//       () => invoiceData.value.invoice_type_code,
//       (newVal) => {
//         if (newVal === '381') {
//           fetchLastInvoices()
//         } else {
//           lastInvoices.value = []
//           selectedCreditNoteRefInvoice.value = ''
//         }
//       }
//     )
//     // -----------------------------------------------

//     // Are we dealing with a restricted invoice type?
//     const isRestrictedInvoiceType = computed(() => {
//       return (
//         invoiceData.value.invoice_type_code === '381' ||
//         invoiceData.value.invoice_type_code === 'Out of scope of tax'
//       )
//     })

//     // Which transaction types to disable if restricted
//     const restrictedTransactionTypes = ['Deemed Supply', 'Margin Scheme', 'Summary Invoice']

//     // For fetching exchange rate
//     const fetchExchangeRate = async () => {
//       if (!invoiceData.value.invoice_currency_code) return
//       try {
//         isLoadingRate.value = true
//         const response = await axios.get('/api/exchange-rate', {
//           params: { currency: invoiceData.value.invoice_currency_code }
//         })
//         invoiceStore.invoiceData.exchange_rate = response.data.rate
//         lastUpdated.value = new Date().toLocaleDateString()
//       } catch (error) {
//         console.error('Error fetching exchange rate:', error)
//       } finally {
//         isLoadingRate.value = false
//       }
//     }

//     // For country subdivisions (Emirates, US states, etc.)
//     const selectedSubdivisions = computed(() => {
//       switch (invoiceData.value.deliver_to_country_code) {
//         case 'AE': return emirates
//         case 'SA': return saudiRegions
//         case 'US': return usStates
//         case 'GB': return ukSubdivisions
//         case 'FR': return franceRegions
//         case 'DE': return germanStates
//         case 'IN': return indianSubdivisions
//         case 'CN': return chinaSubdivisions
//         case 'JP': return japanPrefectures
//         default: return []
//       }
//     })

//     return {
//       invoiceStore,
//       invoiceData,
//       currencies,
//       countries,
//       isLoadingRate,
//       lastUpdated,
//       fetchExchangeRate,
//       selectedSubdivisions,
//       isRestrictedInvoiceType,
//       restrictedTransactionTypes,
//       // Credit note references
//       lastInvoices,
//       selectedCreditNoteRefInvoice,
//       onSelectCreditNoteRefInvoice
//     }
//   },
//   created() {
//     this.currentInvoiceId = this.$route.params.id || null
//     this.isEditMode = !!this.currentInvoiceId
//     // Ensure specification_identifier is set
//     if (!this.invoiceData.specification_identifier) {
//       this.invoiceData.specification_identifier = 'urn:peppol:printbilling-1@ae-1'
//     }
//   },
//   mounted() {
//     this.loadSelectedTransactionTypes()
//   },
//   methods: {
//     async loadInvoiceForEdit(id) {
//       try {
//         const resp = await axios.get(`/api/invoice/${id}`)
//         this.$patchInvoiceData(resp.data.data)
//       } catch (err) {
//         console.error('Error loading invoice:', err)
//       }
//     },
//     $patchInvoiceData(newData) {
//       this.invoiceStore.invoiceData = newData
//       this.loadSelectedTransactionTypes()
//       if (!this.invoiceData.specification_identifier) {
//         this.invoiceData.specification_identifier = 'urn:peppol:printbilling-1@ae-1'
//       }
//     },
//     // Set business_process_type based on invoice_type_code
//     updateBusinessProcessType() {
//       switch (this.invoiceData.invoice_type_code) {
//         case '380':
//           this.invoiceData.business_process_type = 'urn:peppol:bis:billing-1'
//           break
//         case '381':
//           this.invoiceData.business_process_type = 'urn:peppol:bis:creditnote-1'
//           break
//         case '384':
//           this.invoiceData.business_process_type = 'urn:peppol:bis:correctedinvoice-1'
//           break
//         case '386':
//           this.invoiceData.business_process_type = 'urn:peppol:bis:prepaymentinvoice-1'
//           break
//         case '396':
//           this.invoiceData.business_process_type = 'urn:peppol:bis:factoredinvoice-1'
//           break
//         default:
//           this.invoiceData.business_process_type = ''
//       }
//       // If restricted invoice type, unselect disallowed transaction types
//       if (
//         this.invoiceData.invoice_type_code === '381' ||
//         this.invoiceData.invoice_type_code === 'Out of scope of tax'
//       ) {
//         this.transactionTypes.forEach((option) => {
//           if (['Deemed Supply', 'Margin Scheme', 'Summary Invoice'].includes(option.label)) {
//             option.selected = false
//           }
//         })
//         this.updateInvoiceTransactionTypeCode()
//       }
//     },
//     // Convert the array of transactionTypes into a string (e.g., "10100000")
//     updateInvoiceTransactionTypeCode() {
//       const code = this.transactionTypes.map((option) => (option.selected ? '1' : '0')).join('')
//       this.invoiceData.invoice_transaction_type_code = code
//       this.invoiceStore.invoiceData.transactionTypes = JSON.parse(JSON.stringify(this.transactionTypes))
//     },
//     // On mount, read invoice_transaction_type_code to set toggle selections
//     loadSelectedTransactionTypes() {
//       const { invoice_transaction_type_code } = this.invoiceData
//       if (!invoice_transaction_type_code || invoice_transaction_type_code.length !== 8) {
//         this.transactionTypes.forEach((opt) => { opt.selected = false })
//         return
//       }
//       for (let i = 0; i < 8; i++) {
//         this.transactionTypes[i].selected = invoice_transaction_type_code[i] === '1'
//       }
//     }
//   }
// }
// </script>

// Seller_Details.vue
// <template>
//   <div class="container">
//     <!-- Sellers List Section -->
//     <div class="section sellers-list animate-in">
//       <h3><span class="icon">🏬</span> Sellers List</h3>
      
//         <!-- Dropdown for existing sellers -->
//         <div class="select-row">
//       <label class="form-label">Select Seller</label>
//       <select class="form-select" v-model="invoiceData.seller_id" required>
//         <option value="" disabled>Select Seller</option>
//         <option v-for="seller in sellers" :key="seller.seller_id" :value="seller.seller_id">
//           {{ seller.seller_name }}
//         </option>
//       </select>
//     </div>

//     <!-- Conditionally render the Principal ID (TRN) input -->
//     <div v-if="isDisclosedAgentBillingSelected" class="form-group">
//       <label class="form-label">Principal ID (TRN)</label>
//       <input
//         type="text"
//         class="form-control"
//         v-model="invoiceData.principal_id"
//         placeholder="Enter Principal ID (TRN)"
//       />
//       <span class="help-text">Required for Disclosed Agent Billing</span>
//     </div>

//     <br/>
//       <!-- Button to toggle form for creating a new seller -->
//       <div class="button-row">
//         <button class="btn" @click="toggleForm">
//           {{ showForm ? 'Hide Form' : 'Add New Seller' }}
//         </button>
//       </div>

//       <!-- New Seller Form -->
//       <transition name="fade">
//         <div v-if="showForm" class="new-seller-form">
//           <h4>Create a New Seller</h4>
//           <form @submit.prevent="createSeller" novalidate>
//               <div class="form-grid">
//                 <div class="form-group">
//                 <label class="form-label">Seller Name</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.seller_name"
//                   required
//                 />
//               </div>

//               <!-- Scheme Identifier -->
//               <div class="form-group">
//                 <label class="form-label">Scheme Identifier</label>
//                 <select
//                   class="form-control"
//                   v-model="newSeller.scheme_identifier"
//                   @change="handleSchemeChange"
//                 >
//                   <option value="" disabled>Select Scheme Identifier</option>
//                   <option value="0235">0235 → Trade License</option>
//                   <option value="EID">EID → Emirates ID</option>
//                   <option value="PAS">PAS → Passport</option>
//                   <option value="CD">CD → Cabinet Decision</option>
//                 </select>
//               </div>

//               <!-- Passport country code if scheme = PAS -->
//               <div
//                 class="form-group"
//                 v-if="newSeller.scheme_identifier === 'PAS'"
//               >
//                 <label class="form-label">
//                   Passport Issuing Country Code <span class="required-badge">*</span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.passport_issuing_country_code"
//                   required
//                 />
//                 <span class="help-text">Required for Passport scheme</span>
//               </div>

//               <!-- Seller Legal Registration Identifier -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Seller Legal Registration Identifier
//                   <span
//                     v-if="newSeller.scheme_identifier === '0235'"
//                     class="required-badge"
//                   >
//                     *
//                   </span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.legal_identifier"
//                   :required="newSeller.scheme_identifier === '0235'"
//                 />
//                 <span
//                   v-if="newSeller.scheme_identifier === '0235'"
//                   class="help-text"
//                 >
//                   Required for Trade License
//                 </span>
//                 <span
//                   v-else-if="newSeller.scheme_identifier"
//                   class="help-text"
//                 >
//                   Optional for this scheme type
//                 </span>
//               </div>

//               <!-- Seller Tax Identifier -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Seller Tax Identifier
//                   <span v-if="!newSeller.legal_identifier" class="required-badge">
//                     *
//                   </span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.seller_tax_identifier"
//                   pattern="^$|^1[0-9]{12}03$"
//                   title="If provided, must be exactly 15 digits, starting with 1 and ending with 03"
//                   :required="!newSeller.legal_identifier"
//                   @input="updateTaxSchemeCode"
//                 />
//                 <span v-if="!newSeller.legal_identifier" class="help-text">
//                   Required when Legal Registration Identifier is not provided.
//                   Must be exactly 15 digits, starting with 1 and ending with 03
//                 </span>
//                 <span v-else class="help-text">
//                   Optional. If provided, must be exactly 15 digits,
//                   starting with 1 and ending with 03
//                 </span>
//               </div>

//               <!-- Tax Scheme Code (read-only) -->
//               <div
//                 class="form-group"
//                 v-if="newSeller.seller_tax_identifier"
//               >
//                 <label class="form-label">Tax Scheme Code</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   value="VAT"
//                   readonly
//                   @input="newSeller.tax_scheme_code = 'VAT'"
//                 />
//               </div>

//               <!-- Seller Legal Registration Type -->
//               <div class="form-group">
//                 <label class="form-label">Seller Legal Registration Type</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.seller_legal_registration_type"
//                   readonly
//                   :placeholder="newSeller.scheme_identifier ? 'Select scheme identifier first' : ''"
//                 />
//               </div>

//               <!-- Authority Name -->
//               <div class="form-group">
//                 <label class="form-label">Authority Name</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.authority_name"
//                   readonly
//                 />
//               </div>

//               <!-- Scheme Identifier Electronic Address -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Scheme Identifier Electronic Address
//                 </label>
//                 <select
//                   class="form-control"
//                   v-model="newSeller.scheme_identifier_electronic_address"
//                 >
//                   <option value="" disabled>Select Electronic Address Scheme</option>
//                   <option value="0088">0088 → Peppol Electronic Address</option>
//                   <option value="EM">EM → Email Address</option>
//                   <option value="VAT">VAT → VAT Number as Identification</option>
//                   <option value="GLN">
//                     GLN → Global Location Number (GS1)
//                   </option>
//                   <option value="DUNS">DUNS → DUNS Number for Companies</option>
//                 </select>
//               </div>

//               <!-- Electronic Address -->
//               <div class="form-group">
//                 <label class="form-label">Electronic Address</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.electronic_address"
//                   :pattern="electronicAddressPattern"
//                   :title="electronicAddressTitle"
//                   :required="isElectronicAddressRequired"
//                 />
//               </div>

//               <!-- Address Line 1 -->
//               <div class="form-group">
//                 <label class="form-label">Address Line 1</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.address_line1"
//                 />
//               </div>

//               <!-- City -->
//               <div class="form-group">
//                 <label class="form-label">City</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.city"
//                 />
//               </div>

//               <!-- Country Code -->
//               <div class="form-group">
//                 <label class="form-label">Country Code</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.country_code"
//                 />
//               </div>

//               <!-- Country Subdivision -->
//               <div class="form-group">
//                 <label class="form-label">Country Subdivision</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newSeller.country_subdivision"
//                 />
//               </div>
//             </div>

//             <!-- Save / Cancel Buttons -->
//             <div class="button-group">
//               <button type="submit" class="btn">Save Seller</button>
//               <button
//                 type="button"
//                 class="btn cancel-btn"
//                 @click="cancelForm"
//               >
//                 Cancel
//               </button>
//             </div>
//           </form>
//         </div>
//       </transition>
//     </div>
//   </div>
// </template>

// <script>
// import axios from "axios";
// import Swal from "sweetalert2";
// import { useInvoiceStore } from "../invoice";
// import { storeToRefs } from "pinia";

// export default {
//   name: "SellerManagement",

//   data() {
//     return {
//       sellers: [],
//       showForm: false,
//       // The object used when creating a new seller
//       newSeller: {
//         seller_name: "",
//         seller_tax_identifier: "",
//         legal_identifier: "",
//         electronic_address: "",
//         address_line1: "",
//         city: "",
//         country_code: "",
//         country_subdivision: "",
//         seller_legal_registration_type: "",
//         authority_name: "",
//         passport_issuing_country_code: "",
//         scheme_identifier: "",
//         scheme_identifier_electronic_address: "",
//         tax_scheme_code: ""
//       }
//     };
//   },

//   computed: {
//     isDisclosedAgentBillingSelected() {
//     return (
//       this.invoiceData.transactionTypes &&
//       this.invoiceData.transactionTypes.some(
//         option => option.label === "Disclosed Agent Billing" && option.selected
//       )
//     );
//   },
//     // Pattern for "Electronic Address" depending on the chosen scheme_identifier_electronic_address
//     electronicAddressPattern() {
//       switch (this.newSeller.scheme_identifier_electronic_address) {
//         case "0088":
//           return "^8888:\\d{13}$";
//         case "EM":
//           return "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$";
//         case "VAT":
//           return "^1[A-Za-z0-9]{12}03$";
//         case "GLN":
//           return "^\\d{13}$";
//         case "DUNS":
//           return "^\\d{9}$";
//         default:
//           return ".*";
//       }
//     },
//     // Title attribute for input validation tooltip
//     electronicAddressTitle() {
//       switch (this.newSeller.scheme_identifier_electronic_address) {
//         case "0088":
//           return "Format must be 8888: followed by exactly 13 digits (e.g. 8888:123456789123).";
//         case "EM":
//           return "Must be a valid email address with no spaces.";
//         case "VAT":
//           return "15 alphanumeric characters, starting with 1 and ending with 03 (e.g. 1000000000003).";
//         case "GLN":
//           return "Must be exactly 13 numeric digits (e.g. 123456789123).";
//         case "DUNS":
//           return "Must be exactly 9 numeric digits (e.g. 123456789).";
//         default:
//           return "";
//       }
//     },
//     // If a scheme for electronic address is selected, require the field
//     isElectronicAddressRequired() {
//       return this.newSeller.scheme_identifier_electronic_address !== "";
//     }
//   },

//   created() {
//     this.fetchSellers();
//   },

//   methods: {
//     // Fetch existing sellers from the backend
//     fetchSellers() {
//       axios
//         .get("/api/sellers")
//         .then((response) => {
//           this.sellers = response.data.data.data;
//         })
//         .catch((error) => {
//           console.error("Error fetching sellers:", error);
//         });
//     },

//     toggleForm() {
//       this.showForm = !this.showForm;
//     },

//     cancelForm() {
//       this.showForm = false;
//       this.resetNewSeller();
//     },

//     resetNewSeller() {
//       this.newSeller = {
//         seller_name: "",
//         seller_tax_identifier: "",
//         legal_identifier: "",
//         electronic_address: "",
//         address_line1: "",
//         city: "",
//         country_code: "",
//         country_subdivision: "",
//         seller_legal_registration_type: "",
//         authority_name: "",
//         passport_issuing_country_code: "",
//         scheme_identifier: "",
//         scheme_identifier_electronic_address: "",
//         tax_scheme_code: ""
//       };
//     },

//     // Set registration type based on scheme identifier
//     handleSchemeChange() {
//       if (this.newSeller.scheme_identifier === "0235") {
//         this.newSeller.seller_legal_registration_type = "Trade License";
//       } else if (this.newSeller.scheme_identifier === "EID") {
//         this.newSeller.seller_legal_registration_type = "Emirates ID";
//       } else if (this.newSeller.scheme_identifier === "PAS") {
//         this.newSeller.seller_legal_registration_type = "Passport";
//       } else if (this.newSeller.scheme_identifier === "CD") {
//         this.newSeller.seller_legal_registration_type = "Cabinet Decision Number";
//       } else {
//         this.newSeller.seller_legal_registration_type = "";
//       }
//       this.updateAuthorityName();
//     },

//     // Set authority name based on registration type
//     updateAuthorityName() {
//       switch (this.newSeller.seller_legal_registration_type) {
//         case "Trade License":
//           this.newSeller.authority_name = "Department of Economic Development (DED)";
//           break;
//         case "Emirates ID":
//           this.newSeller.authority_name = "Federal Authority for Identity and Citizenship (FAIC)";
//           break;
//         case "Passport":
//           this.newSeller.authority_name = "UAE Immigration Authorities";
//           break;
//         case "Cabinet Decision Number":
//           this.newSeller.authority_name = "UAE Government or specific ministry responsible for the regulation";
//           break;
//         default:
//           this.newSeller.authority_name = "";
//       }
//     },

//     // If seller_tax_identifier is entered, set tax_scheme_code = 'VAT'
//     updateTaxSchemeCode() {
//       if (this.newSeller.seller_tax_identifier) {
//         this.newSeller.tax_scheme_code = "VAT";
//       }
//     },

//     // Create a new seller, then set invoiceData.seller_id from the store
//     createSeller() {
//       axios
//         .post("/api/seller", this.newSeller)
//         .then((resp) => {
//           Swal.fire({
//             icon: "success",
//             title: "Success",
//             text: resp.data.message || "Seller created!"
//           });
//           // Get the new seller ID from the response
//           const newId = resp.data.data.seller_id;
//           // Update the shared invoice data in Pinia with the new seller ID
//           this.invoiceStore.invoiceData.seller_id = newId;
//           // Refresh seller list
//           this.fetchSellers();
//           // Hide the form and reset
//           this.showForm = false;
//           this.resetNewSeller();
//         })
//         .catch((err) => {
//           const errData = err.response && err.response.data;
//           if (errData) {
//             let errorHtml = errData.message ? `<p><strong>${errData.message}</strong></p>` : "";
//             if (errData.errors) {
//               errorHtml += "<ul>";
//               for (let field in errData.errors) {
//                 errData.errors[field].forEach((msg) => {
//                   errorHtml += `<li>${msg}</li>`;
//                 });
//               }
//               errorHtml += "</ul>";
//             }
//             Swal.fire({
//               icon: "error",
//               title: "Validation Error",
//               html: errorHtml || "Please check your inputs."
//             });
//           } else {
//             Swal.fire({
//               icon: "error",
//               title: "Error",
//               text: "An unexpected error occurred."
//             });
//           }
//         });
//     }
//   },

//   setup() {
//     // Access the Pinia store to use shared invoice data
//     const invoiceStore = useInvoiceStore();
//     const { invoiceData } = storeToRefs(invoiceStore);
//     return { invoiceData, invoiceStore };
//   }
// };
// </script>

// Buyer_Details.vue
// <template>
//   <div class="container">
//     <!-- Buyers List Section -->
//     <div class="section buyers-list animate-in">
//       <h3><span class="icon">🛒</span> Buyers List</h3>

//       <!-- Existing Buyers Dropdown -->
//       <div class="select-row">
//         <label class="form-label">Select Buyer</label>
//         <select class="form-select" v-model="invoiceData.buyer_id" required>
//           <option value="" disabled>Select Buyer</option>
//           <option
//             v-for="buyer in buyers"
//             :key="buyer.buyer_id"
//             :value="buyer.buyer_id"
//           >
//             {{ buyer.buyer_name }} - {{ buyer.buyer_tax_identifier }}
//           </option>
//         </select>
//       </div>

//       <!-- "Add New Buyer" Button -->
//       <div class="button-row">
//         <button class="btn" @click="toggleForm">
//           {{ showForm ? 'Hide Form' : 'Add New Buyer' }}
//         </button>
//       </div>

//       <!-- Animated New Buyer Form -->
//       <transition name="fade">
//         <div v-if="showForm" class="new-buyer-form">
//           <h4>Create a New Buyer</h4>
//           <form @submit.prevent="createBuyer" novalidate>
//             <div class="form-grid">
//               <!-- Buyer Name -->
//               <div class="form-group">
//                 <label class="form-label">Buyer Name</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.buyer_name"
//                   required
//                 />
//               </div>

//               <!-- Scheme Identifier -->
//               <div class="form-group">
//                 <label class="form-label">Scheme Identifier</label>
//                 <select
//                   class="form-control"
//                   v-model="newBuyer.scheme_identifier"
//                   @change="handleSchemeChange"
//                 >
//                   <option value="" disabled>Select Scheme Identifier</option>
//                   <option value="0235">0235 → Trade License</option>
//                   <option value="EID">EID → Emirates ID</option>
//                   <option value="PAS">PAS → Passport</option>
//                   <option value="CD">CD → Cabinet Decision</option>
//                 </select>
//               </div>

//               <!-- Passport Issuing Country Code -->
//               <div
//                 class="form-group"
//                 v-if="newBuyer.scheme_identifier === 'PAS'"
//               >
//                 <label class="form-label">
//                   Passport Issuing Country Code <span class="required-badge">*</span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.buyer_passport_issuing_country"
//                   required
//                 />
//                 <span class="help-text">Required for Passport scheme</span>
//               </div>

//               <!-- Buyer Legal Registration Identifier -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Buyer Legal Registration Identifier
//                   <span
//                     v-if="newBuyer.scheme_identifier === '0235'"
//                     class="required-badge"
//                   >
//                     *
//                   </span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.legal_identifier"
//                   :required="newBuyer.scheme_identifier === '0235'"
//                 />
//                 <span v-if="newBuyer.scheme_identifier === '0235'" class="help-text">
//                   Required for Trade License
//                 </span>
//                 <span v-else-if="newBuyer.scheme_identifier" class="help-text">
//                   Optional for this scheme type
//                 </span>
//               </div>

//               <!-- Buyer Tax Identifier -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Buyer Tax Identifier
//                   <span v-if="!newBuyer.legal_identifier" class="required-badge">
//                     *
//                   </span>
//                 </label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.buyer_tax_identifier"
//                   pattern="^$|^1[0-9]{12}03$"
//                   title="If provided, must be exactly 15 digits, starting with 1 and ending with 03"
//                   :required="!newBuyer.legal_identifier"
//                 />
//                 <span v-if="!newBuyer.legal_identifier" class="help-text">
//                   Required when Legal Registration Identifier is not provided. Must be
//                   exactly 15 digits, starting with 1 and ending with 03
//                 </span>
//                 <span v-else class="help-text">
//                   Optional. If provided, must be exactly 15 digits, starting with 1
//                   and ending with 03
//                 </span>
//               </div>

//               <!-- Buyer Legal Registration Type (auto-populated) -->
//               <div class="form-group">
//                 <label class="form-label">Buyer Legal Registration Type</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.buyer_legal_registration_type"
//                   readonly
//                   :placeholder="newBuyer.scheme_identifier ? 'Select scheme identifier first' : ''"
//                 />
//               </div>

//               <!-- Authority Code (auto-populated) -->
//               <div class="form-group">
//                 <label class="form-label">Authority Code</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.authority_code"
//                   readonly
//                 />
//               </div>

//               <!-- Scheme Identifier Electronic Address -->
//               <div class="form-group">
//                 <label class="form-label">
//                   Scheme Identifier Electronic Address
//                 </label>
//                 <select
//                   class="form-control"
//                   v-model="newBuyer.scheme_identifier_electronic_address"
//                 >
//                   <option value="" disabled>Select Electronic Address Scheme</option>
//                   <option value="0088">0088 → Peppol Electronic Address</option>
//                   <option value="EM">EM → Email Address</option>
//                   <option value="VAT">VAT → VAT Number as Identification</option>
//                   <option value="GLN">GLN → Global Location Number (GS1)</option>
//                   <option value="DUNS">DUNS → DUNS Number for Companies</option>
//                 </select>
//               </div>

//               <!-- Electronic Address -->
//               <div class="form-group">
//                 <label class="form-label">Electronic Address</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.electronic_address"
//                   :pattern="electronicAddressPattern"
//                   :title="electronicAddressTitle"
//                   :required="isElectronicAddressRequired"
//                 />
//               </div>

//               <!-- Address Fields -->
//               <div class="form-group">
//                 <label class="form-label">Address Line 1</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.address_line1"
//                 />
//               </div>
//               <div class="form-group">
//                 <label class="form-label">City</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.city"
//                 />
//               </div>
//               <div class="form-group">
//                 <label class="form-label">Country Code</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.country_code"
//                 />
//               </div>
//               <div class="form-group">
//                 <label class="form-label">Country Subdivision</label>
//                 <input
//                   type="text"
//                   class="form-control"
//                   v-model="newBuyer.country_subdivision"
//                 />
//               </div>
//             </div>

//             <!-- Form Buttons -->
//             <div class="button-group">
//               <button type="submit" class="btn">Save Buyer</button>
//               <button
//                 type="button"
//                 class="btn cancel-btn"
//                 @click="cancelForm"
//               >
//                 Cancel
//               </button>
//             </div>
//           </form>
//         </div>
//       </transition>
//     </div>
//   </div>
// </template>

// <script>
// import axios from "axios";
// import Swal from "sweetalert2";
// import { useInvoiceStore } from "../invoice";
// import { storeToRefs } from "pinia";

// export default {
//   name: "BuyerManagement",
//   data() {
//     return {
//       buyers: [],
//       showForm: false,
//       // Data for creating a new buyer
//       newBuyer: {
//         buyer_name: "",
//         buyer_tax_identifier: "",
//         legal_identifier: "",
//         electronic_address: "",
//         address_line1: "",
//         city: "",
//         country_code: "",
//         country_subdivision: "",
//         buyer_legal_registration_type: "",
//         authority_code: "",
//         buyer_passport_issuing_country: "",
//         scheme_identifier: "",
//         scheme_identifier_electronic_address: ""
//       }
//     };
//   },
//   computed: {
//     // Validate the Electronic Address based on the selected scheme
//     electronicAddressPattern() {
//       switch (this.newBuyer.scheme_identifier_electronic_address) {
//         case "0088":
//           return "^8888:\\d{13}$"; // Format: 8888: followed by exactly 13 digits
//         case "EM":
//           return "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$";
//         case "VAT":
//           return "^1[A-Za-z0-9]{12}03$";
//         case "GLN":
//           return "^\\d{13}$";
//         case "DUNS":
//           return "^\\d{9}$";
//         default:
//           return ".*";
//       }
//     },
//     electronicAddressTitle() {
//       switch (this.newBuyer.scheme_identifier_electronic_address) {
//         case "0088":
//           return "Format must be 8888: followed by exactly 13 digits (e.g. 8888:1234567891234).";
//         case "EM":
//           return "Must be a valid email address with no spaces.";
//         case "VAT":
//           return "15 alphanumeric chars, starting with 1 and ending with 03 (e.g. 1000000000003).";
//         case "GLN":
//           return "Must be exactly 13 numeric digits.";
//         case "DUNS":
//           return "Must be exactly 9 numeric digits.";
//         default:
//           return "";
//       }
//     },
//     isElectronicAddressRequired() {
//       return this.newBuyer.scheme_identifier_electronic_address !== "";
//     }
//   },
//   created() {
//     // Load the list of buyers (this API call is specific to the buyer list and remains)
//     this.fetchBuyers();
//   },
//   methods: {
//     fetchBuyers() {
//       axios
//         .get("/api/buyers")
//         .then(response => {
//           // Adjust this based on your API response structure
//           this.buyers = response.data.data.data;
//         })
//         .catch(error => {
//           console.error("Error fetching buyers:", error);
//         });
//     },
//     toggleForm() {
//       this.showForm = !this.showForm;
//     },
//     cancelForm() {
//       this.showForm = false;
//       this.resetNewBuyer();
//     },
//     resetNewBuyer() {
//       this.newBuyer = {
//         buyer_name: "",
//         buyer_tax_identifier: "",
//         legal_identifier: "",
//         electronic_address: "",
//         address_line1: "",
//         city: "",
//         country_code: "",
//         country_subdivision: "",
//         buyer_legal_registration_type: "",
//         authority_code: "",
//         buyer_passport_issuing_country: "",
//         scheme_identifier: "",
//         scheme_identifier_electronic_address: ""
//       };
//     },
//     handleSchemeChange() {
//       if (this.newBuyer.scheme_identifier === "0235") {
//         this.newBuyer.buyer_legal_registration_type = "Trade License";
//       } else if (this.newBuyer.scheme_identifier === "EID") {
//         this.newBuyer.buyer_legal_registration_type = "Emirates ID";
//       } else if (this.newBuyer.scheme_identifier === "PAS") {
//         this.newBuyer.buyer_legal_registration_type = "Passport";
//       } else if (this.newBuyer.scheme_identifier === "CD") {
//         this.newBuyer.buyer_legal_registration_type = "Cabinet Decision Number";
//       } else {
//         this.newBuyer.buyer_legal_registration_type = "";
//       }
//       this.updateAuthorityCode();
//     },
//     updateAuthorityCode() {
//       switch (this.newBuyer.buyer_legal_registration_type) {
//         case "Trade License":
//           this.newBuyer.authority_code = "Department of Economic Development (DED)";
//           break;
//         case "Emirates ID":
//           this.newBuyer.authority_code = "Federal Authority for Identity and Citizenship (FAIC)";
//           break;
//         case "Passport":
//           this.newBuyer.authority_code = "UAE Immigration Authorities";
//           break;
//         case "Cabinet Decision Number":
//           this.newBuyer.authority_code = "UAE Government or specific ministry responsible for the regulation";
//           break;
//         default:
//           this.newBuyer.authority_code = "";
//       }
//     },
//     createBuyer() {
//       axios
//         .post("/api/buyer", this.newBuyer)
//         .then(response => {
//           const successText = response.data.message || "Buyer created successfully!";
//           Swal.fire({
//             icon: "success",
//             title: "Success",
//             text: successText
//           });

//           // Get the new buyer ID from the response
//           const newBuyerId = response.data.data.buyer_id;

//           // Set the buyer_id in the shared invoice data from Pinia
//           this.invoiceStore.invoiceData.buyer_id = newBuyerId;

//           // Refresh the buyers list
//           this.fetchBuyers();

//           // Hide the form and reset its fields
//           this.showForm = false;
//           this.resetNewBuyer();
//         })
//         .catch(error => {
//           console.error("Error creating buyer:", error);
//           if (error.response && error.response.data) {
//             const errData = error.response.data;
//             let errorHtml = "";
//             if (errData.message) {
//               errorHtml += `<p><strong>${errData.message}</strong></p>`;
//             }
//             if (errData.errors) {
//               errorHtml += "<ul>";
//               for (let field in errData.errors) {
//                 errData.errors[field].forEach(msg => {
//                   errorHtml += `<li>${msg}</li>`;
//                 });
//               }
//               errorHtml += "</ul>";
//             }
//             Swal.fire({
//               icon: "error",
//               title: "Validation Error",
//               html: errorHtml || "Please check the inputs."
//             });
//           } else {
//             Swal.fire({
//               icon: "error",
//               title: "Error",
//               text: "An unexpected error occurred."
//             });
//           }
//         });
//     }
//   },
//   setup() {
//     // Access the shared invoice store (for setting invoiceData.buyer_id)
//     const invoiceStore = useInvoiceStore();
//     const { invoiceData } = storeToRefs(invoiceStore);
//     return { invoiceData, invoiceStore };
//   }
// };
// </script>

// Document_Totals.vue
// <template>
//   <div class="container">
//     <!-- Invoice Lines Section -->
//     <div class="section invoice-line animate-in" style="animation-delay: 0.4s">
//       <h3>
//         <span class="icon">🧾</span> Invoice Lines
//       </h3>
//       <!-- Button to add new Invoice Line -->
//       <button class="add-line-button" @click="addInvoiceLine">
//         + Add Invoice Line
//       </button>

//       <!-- Render multiple invoice lines -->
//       <div
//         v-for="(line, index) in invoiceData.invoice_lines"
//         :key="index"
//         class="invoice-line-grid"
//       >
//         <!-- Identifier -->
//         <div class="form-row">
//           <label class="form-label">Invoice Line Identifier</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.invoice_line_identifier"
//             readonly
//           />
//         </div>

//         <!-- Invoiced Quantity -->
//         <div class="form-row">
//           <label class="form-label">Invoiced Quantity</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.invoiced_quantity"
//             placeholder="Invoiced Quantity"
//             @input="line.invoiced_quantity = line.invoiced_quantity.replace(/[^0-9.]/g, '')"
//           />
//         </div>

//         <!-- Unit Measure Code -->
//         <div class="form-row">
//           <label class="form-label">Unit Measure Code</label>
//           <select class="form-select" v-model="line.invoiced_quantity_unit_code">
//             <option value="" disabled>Select Unit</option>
//             <option v-for="unit in units" :key="unit" :value="unit">
//               {{ unit }}
//             </option>
//           </select>
//         </div>

//         <!-- Item Gross Price -->
//         <div class="form-row">
//           <label class="form-label">Item Gross Price</label>
//           <div class="form-group currency-group">
//             <input
//               type="text"
//               class="form-control"
//               v-model="line.item_gross_price"
//               placeholder="Item Gross Price"
//               @input="line.item_gross_price = line.item_gross_price.replace(/[^0-9.]/g, '')"
//             />
//             <span class="currency">AED</span>
//           </div>
//         </div>

//         <!-- Discount Type -->
//         <div class="form-row">
//           <label class="form-label">Discount Type</label>
//           <select class="form-select" v-model="line.discount_type">
//             <option value="" disabled>Select Discount Type</option>
//             <option value="static">Static</option>
//             <option value="percentage">Percentage</option>
//           </select>
//         </div>

//         <!-- Discount Value -->
//         <div class="form-row">
//           <label class="form-label">Discount Value</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.discount_value"
//             placeholder="Discount Value"
//             @input="line.discount_value = line.discount_value.replace(/[^0-9.]/g, '')"
//           />
//         </div>

//         <!-- Item Net Price (read-only) -->
//         <div class="form-row">
//           <label class="form-label">Item Net Price</label>
//           <div class="form-group currency-group">
//             <input
//               type="text"
//               class="form-control"
//               :value="line.item_net_price"
//               readonly
//             />
//             <span class="currency">AED</span>
//           </div>
//         </div>

//         <!-- Invoice Line Net Amount (read-only) -->
//         <div class="form-row">
//           <label class="form-label">Invoice Line Net Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.invoice_line_net_amount"
//             readonly
//           />
//         </div>

//         <!-- Item Description -->
//         <div class="form-row">
//           <label class="form-label">Item Description</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.item_description"
//             placeholder="Item Description"
//           />
//         </div>

//         <!-- Item Classification -->
//         <div class="form-row">
//           <label class="form-label">Item Classification</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.item_classification"
//             placeholder="Item Classification"
//           />
//         </div>

//         <!-- Item Name -->
//         <div class="form-row">
//           <label class="form-label">Item Name</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.item_name"
//             placeholder="Item Name"
//           />
//         </div>

//         <!-- Item Type -->
//         <div class="form-row">
//           <label class="form-label">Item Type</label>
//           <select class="form-select" v-model="line.item_type">
//             <option value="" disabled>Select Item Type</option>
//             <option value="Goods">Goods</option>
//             <option value="Services">Services</option>
//           </select>
//         </div>

//         <!-- Item Price Base Quantity -->
//         <div class="form-row">
//           <label class="form-label">Item Price Base Quantity</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.item_price_base_quantity"
//             placeholder="Item Price Base Quantity"
//           />
//         </div>

        

//         <!-- Invoiced Item Tax Rate (read-only) -->
//         <div class="form-row">
//           <label class="form-label">Invoiced Item Tax Rate</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="line.invoiced_item_tax_rate"
//             readonly
//           />
//         </div>

//         <!-- VAT Line Amount (read-only) -->
//         <div class="form-row">
//           <label class="form-label">VAT Line Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="line.vat_line_amount"
//             readonly
//           />
//         </div>



//         <!-- Classification Scheme Identifier (Goods) -->
//         <div class="form-row" v-if="line.item_type === 'Goods'">
//           <label class="form-label">Classification Scheme Identifier</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.classification_scheme_identifier"
//             placeholder="Classification Scheme Identifier"
//           />
//         </div>

//         <!-- SAC Scheme Identifier (Services) -->
//         <div class="form-row" v-if="line.item_type === 'Services'">
//           <label class="form-label">SAC Scheme Identifier</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.sac_scheme_identifier"
//             placeholder="SAC Scheme Identifier"
//           />
//         </div>

//         <!-- Tax Category Code -->
//         <div class="form-row">
//           <label class="form-label">Invoiced Item Tax Category Code</label>
//           <select
//             class="form-select"
//             v-model="line.invoiced_item_tax_category_code"
//             @change="
//               line.invoiced_item_tax_rate =
//                 line.invoiced_item_tax_category_code === 'standard_rate'
//                   ? 5
//                   : line.invoiced_item_tax_category_code === 'Reverse_Charge'
//                     ? 5
//                     : 0
//             "
//           >
//             <option value="" disabled>Select Tax Category</option>
//             <option value="standard_rate">Standard rate (5% VAT)</option>
//             <option value="Reverse_Charge">Reverse Charge (5% VAT)</option>
//             <option value="zero_rated">Zero-rated (0% VAT)</option>
//             <option value="exempt">Exempt (0% VAT)</option>
//             <!-- Additional options when Margin Scheme is selected -->
//             <option v-if="isMarginSchemeSelected" value="second_hand">
//               Second hand goods (0% VAT)
//             </option>
//             <option v-if="isMarginSchemeSelected" value="works_of_art">
//               Works of art (0% VAT)
//             </option>
//             <option v-if="isMarginSchemeSelected" value="collectors_items">
//               Collectors items and antiques (0% VAT)
//             </option>
//           </select>
//           <div v-if="line.invoiced_item_tax_category_code === 'Reverse_Charge'" class="reverse-charge-alert">
//             <i class="alert-icon">ℹ️</i>
//             <span>Reverse Charge Mechanism applied: VAT will not be collected by the seller. Buyer is responsible for VAT reporting</span>
//           </div>
//         </div>


//         <!-- Tax exemption reason text -->
//         <div class="form-row" v-if="line.invoiced_item_tax_category_code === 'zero_rated'">
//           <label class="form-label">Tax Exemption Reason Text</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.tax_exemption_reason"
//             placeholder="Enter tax exemption reason"
//           />
//         </div>

//         <!-- Tax Exemption Reason Code -->
//         <div class="form-row" v-if="line.invoiced_item_tax_category_code === 'zero_rated'">
//           <label class="form-label">Tax Exemption Reason Code</label>
//           <select class="form-select" v-model="line.tax_exemption_reason_code">
//             <option value="" disabled>Select Exemption Reason</option>
//             <option value="ZRE">ZRE - Zero-Rated Export (Goods/services exported outside the UAE)</option>
//             <option value="ZRL">ZRL - Zero-Rated Local Supply (Education, healthcare, specific food items)</option>
//             <option value="EXE">EXE - Exempt Supply (Financial services, bare land sales, local passenger transport)</option>
//             <option value="RCM">RCM - Reverse Charge Mechanism (VAT paid by buyer)</option>
//             <option value="OSR">OSR - Out of Scope Revenue (Transactions outside VAT scope)</option>
//           </select>
//         </div>
        
//         <!-- Item Standard Identifier -->
//         <div class="form-row" v-if="line.invoiced_item_tax_category_code === 'Reverse_Charge'">
//           <label class="form-label">Item Standard Identifier</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="line.Item_Standard_Identifier"
//             placeholder="Item Standard Identifier"
//             @input="
//               line.Item_Standard_Identifier = line.Item_Standard_Identifier.replace(/[^0-9]/g, '');"
//           />
//         </div>

//         <!-- Remove line button -->
//         <button class="remove-line-button" @click="removeInvoiceLine(index)">
//           Remove
//         </button>
//       </div>
//     </div>

//     <!-- Tax Breakdown Section -->
//     <div class="section tax-breakdown animate-in" style="animation-delay: 0.2s">
//       <h3>
//         <span class="icon">💰</span> Tax Breakdown
//       </h3>
//       <table class="tax-breakdown-table">
//         <thead>
//           <tr>
//             <th>Tax Category Code</th>
//             <th>Taxable Amount</th>
//             <th>Tax Rate (%)</th>
//             <th>Tax Amount</th>
//           </tr>
//         </thead>
//         <tbody>
//           <tr v-for="(row, i) in computedTaxBreakdownByCategory" :key="i">
//             <td>{{ row.tax_category_code }}</td>
//             <td>{{ row.taxable_amount.toFixed(2) }}</td>
//             <td>{{ row.tax_category_rate.toFixed(2) }}%</td>
//             <td>{{ row.tax_amount.toFixed(2) }}</td>
//           </tr>
//         </tbody>
//       </table>
//     </div>

//     <!-- Document Totals Section -->
//     <div class="sections-grid">
//       <div class="section document-totals animate-in">
//         <h3>
//           <span class="icon">📄</span> Document Totals
//         </h3>
//         <div class="form-row">
//           <label class="form-label">Invoice Total Line Net Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="invoice_total_line_net_amount"
//             readonly
//           />
//         </div>
//         <div class="form-row">
//           <label class="form-label">Invoice Total Tax Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="invoice_total_tax_amount"
//             readonly
//           />
//         </div>
//         <div class="form-row">
//           <label class="form-label">Invoice Total With Tax</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="invoice_total_with_tax"
//             readonly
//           />
//         </div>
//         <div class="form-row">
//           <label class="form-label">Paid Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="invoiceData.paid_amount"
//             placeholder="Enter Paid Amount"
//           />
//         </div>
//         <div class="form-row">
//           <label class="form-label">Rounding Amount</label>
//           <input
//             type="text"
//             class="form-control"
//             v-model="invoiceData.rounding_amount"
//             placeholder="Enter Rounding Amount"
//           />
//         </div>
//         <div class="form-row">
//           <label class="form-label">Invoice Due For Payment</label>
//           <input
//             type="text"
//             class="form-control"
//             :value="invoice_due_for_payment"
//             readonly
//           />
//         </div>
//       </div>

//       <!-- Payment Details Section -->
//       <div class="section payment-details animate-in" style="animation-delay: 0.2s">
//         <h3>
//           <span class="icon">💳</span> Payment Details
//         </h3>
//         <div class="form-row">
//           <label class="form-label">Payment Means Type Code</label>
//           <select class="form-select" v-model="invoiceData.payment_means_type_code">
//             <option value="" disabled>Select Payment Means</option>
//             <option value="1">Instrument Not Defined</option>
//             <option value="10">Bank Transfer</option>
//             <option value="31">Credit Card</option>
//             <option value="97">Cash</option>
//             <option value="ZZZ">Mutually Defined</option>
//           </select>
//         </div>

//         <!-- If Payment Means = Credit Card -->
//         <template v-if="invoiceData.payment_means_type_code === '31'">
//           <div class="form-row">
//             <label class="form-label">Card Number</label>
//             <input
//               type="text"
//               class="form-control"
//               v-model="invoiceData.payment_card_primary_account_number"
//               placeholder="Enter Card Number"
//             />
//           </div>
//           <div class="form-row">
//             <label class="form-label">Cardholder Name</label>
//             <input
//               type="text"
//               class="form-control"
//               v-model="invoiceData.payment_account_name"
//               placeholder="Enter Cardholder Name"
//             />
//           </div>
//           <div class="form-row">
//             <label class="form-label">Expiry Date</label>
//             <input
//               type="text"
//               class="form-control"
//               v-model="invoiceData.expiry_date"
//               placeholder="MM/YY"
//             />
//           </div>
//           <div class="form-row">
//             <label class="form-label">CVV</label>
//             <input
//               type="password"
//               class="form-control"
//               v-model="invoiceData.cvv"
//               placeholder="Enter CVV"
//             />
//           </div>
//         </template>

//         <!-- If Payment Means = Bank Transfer -->
//         <template v-if="invoiceData.payment_means_type_code === '10'">
//           <div class="form-row">
//             <label class="form-label">Bank Account Number</label>
//             <input
//               type="text"
//               class="form-control"
//               v-model="invoiceData.payment_account_identifier"
//               placeholder="Enter Bank Account Number"
//             />
//           </div>
//           <div class="form-row">
//             <label class="form-label">Bank Name</label>
//             <input
//               type="text"
//               class="form-control"
//               v-model="invoiceData.payment_account_name"
//               placeholder="Enter Bank Name"
//             />
//           </div>
//         </template>

//         <!-- Payment Date -->
//         <div class="form-row">
//           <label class="form-label">Payment Date</label>
//           <input
//             type="date"
//             class="form-control"
//             v-model="invoiceData.payment_date"
//             placeholder="Payment Date"
//           />
//         </div>
//       </div>
//     </div>
//   </div>
// </template>

// <script>
// import { computed, watchEffect } from 'vue'
// import { useInvoiceStore } from '../invoice'
// import { storeToRefs } from 'pinia'

// export default {
//   name: 'DocumentTotals',
//   props: {
//     // If true, we apply "hard logic" for discount in watchEffect
//     isEditMode: {
//       type: Boolean,
//       default: false
//     }
//   },
//   setup(props) {
//     const invoiceStore = useInvoiceStore()
//     const { invoiceData } = storeToRefs(invoiceStore)

//     // Ensure invoiceData exists and has an array for invoice_lines.
//     if (!invoiceData.value) {
//       invoiceData.value = {}
//     }
//     if (!invoiceData.value.invoice_lines) {
//       invoiceData.value.invoice_lines = []
//     }

//     const units = ['PCS', 'KG', 'L', 'BOX']

//     const addInvoiceLine = () => {
//       invoiceData.value.invoice_lines.push({
//         invoice_line_identifier: '',
//         invoiced_quantity: '',
//         invoiced_quantity_unit_code: '',
//         item_gross_price: 0,
//         discount_type: '',
//         discount_value: 0,
//         item_net_price: 0,
//         invoice_line_net_amount: 0,
//         item_description: '',
//         item_classification: '',
//         item_price_base_quantity: 1,
//         invoiced_item_tax_rate: '',
//         vat_line_amount: 0,
//         invoiced_item_tax_category_code: '',
//         Item_Standard_Identifier: '',
//         item_name: '',
//         item_type: '',
//         classification_scheme_identifier: '',
//         sac_scheme_identifier: '',
//         tax_exemption_reason: '',
//         tax_exemption_reason_code: ''
//       })
//     }

//     const removeInvoiceLine = (index) => {
//       invoiceData.value.invoice_lines.splice(index, 1)
//     }

//     // Recompute line amounts on data changes.
//     watchEffect(() => {
//       if (!invoiceData.value.invoice_lines) return

//       invoiceData.value.invoice_lines.forEach((line, idx) => {
//         // Set invoice line identifier.
//         line.invoice_line_identifier = String(idx + 1)

//         const gross = parseFloat(line.item_gross_price) || 0
//         let discountVal = parseFloat(line.discount_value) || 0

//         // If editing an existing invoice, clamp discount values.
//         if (props.isEditMode) {
//           if (line.discount_type === 'percentage') {
//             if (discountVal > 100) {
//               discountVal = 100
//               line.discount_value = '100'
//             } else if (discountVal < 0) {
//               discountVal = 0
//               line.discount_value = '0'
//             }
//           }
//           if (line.discount_type === 'static') {
//             if (discountVal > gross) {
//               discountVal = gross
//               line.discount_value = String(gross)
//             } else if (discountVal < 0) {
//               discountVal = 0
//               line.discount_value = '0'
//             }
//           }
//         }

//         // Compute net price based on discount type.
//         if (line.discount_type === 'percentage') {
//           line.item_net_price = gross - (gross * discountVal / 100)
//         } else if (line.discount_type === 'static') {
//           line.item_net_price = gross - discountVal
//         } else {
//           line.item_net_price = gross
//         }
//         if (line.item_net_price < 0) {
//           line.item_net_price = 0
//         }

//         const baseQty = parseFloat(line.item_price_base_quantity) || 1
//         const qty = parseFloat(line.invoiced_quantity) || 0
//         line.invoice_line_net_amount = (line.item_net_price / baseQty) * qty

//         let rate = parseFloat(line.invoiced_item_tax_rate) || 0
//         if (line.invoiced_item_tax_category_code === 'Reverse_Charge') {
//           line.vat_line_amount = 0
//         } else {
//           line.vat_line_amount = (line.invoice_line_net_amount * rate) / 100
//         }
//       })
//     })

//     // Summaries
//     const invoice_total_line_net_amount = computed(() => {
//       return invoiceData.value.invoice_lines.reduce((sum, line) => {
//         return sum + (parseFloat(line.invoice_line_net_amount) || 0)
//       }, 0)
//     })

//     const computedTaxBreakdownByCategory = computed(() => {
//       const map = {}
//       invoiceData.value.invoice_lines.forEach((line) => {
//         if (!line.invoiced_item_tax_category_code) return
//         const code = line.invoiced_item_tax_category_code
//         const rate = parseFloat(line.invoiced_item_tax_rate) || 0
//         const taxableAmount = parseFloat(line.invoice_line_net_amount) || 0
//         let taxAmount = (taxableAmount * rate) / 100

//         if (code === 'Reverse_Charge') {
//           taxAmount = 0 // No tax applied for Reverse Charge.
//         }

//         if (!map[code]) {
//           map[code] = {
//             tax_category_code: code,
//             tax_category_rate: rate,
//             taxable_amount: 0,
//             tax_amount: 0,
//           }
//         }
//         map[code].taxable_amount += taxableAmount
//         map[code].tax_amount += taxAmount
//       })
//       return Object.values(map).map((item) => {
//         return {
//           tax_category_code: item.tax_category_code,
//           tax_category_rate: item.tax_category_rate,
//           taxable_amount: item.taxable_amount,
//           tax_amount: item.tax_amount,
//         }
//       })
//     })

//     const invoice_total_tax_amount = computed(() => {
//       return computedTaxBreakdownByCategory.value.reduce((sum, row) => {
//         return sum + row.tax_amount
//       }, 0)
//     })

//     const invoice_total_with_tax = computed(() => {
//       return invoice_total_line_net_amount.value + invoice_total_tax_amount.value
//     })

//     const invoice_due_for_payment = computed(() => {
//       const paid = parseFloat(invoiceData.value.paid_amount) || 0
//       const rounding = parseFloat(invoiceData.value.rounding_amount) || 0
//       return invoice_total_with_tax.value - paid + rounding
//     })

//     // Computed property to determine if the third transaction type (index 2) is selected.
//     const isMarginSchemeSelected = computed(() => {
//       return invoiceData.value.transactionTypes &&
//              invoiceData.value.transactionTypes[2] &&
//              invoiceData.value.transactionTypes[2].selected
//     })

//     return {
//       invoiceData,
//       units,
//       addInvoiceLine,
//       removeInvoiceLine,
//       invoice_total_line_net_amount,
//       computedTaxBreakdownByCategory,
//       invoice_total_tax_amount,
//       invoice_total_with_tax,
//       invoice_due_for_payment,
//       isMarginSchemeSelected
//     }
//   }
// }
// </script>

// invoice.js

// import { defineStore } from 'pinia'
// import axios from 'axios'

// export const useInvoiceStore = defineStore('invoice', {
//   state: () => ({
//     invoiceData: {
//       invoice_issue_date: '',
//       invoice_type_code: '',
//       invoice_currency_code: '',
//       payment_currency_code: '',
//       tax_registration_identifier: '',
//       invoice_total_line_net_amount: 0,
//       invoice_total_tax_amount: 0,
//       invoice_total_with_tax: 0,
//       invoice_due_for_payment: 0,
//       payment_due_date: '',
//       business_process_type: '',
//       specification_identifier: '',
//       currency_exchange_rate: null,
//       invoice_total_tax_amount_acc_currency: 0,
//       status: '',
//       seller_id: null,
//       buyer_id: null,

//       // Payment fields
//       payment_means_type_code: '',
//       payment_account_identifier: '',
//       payment_account_name: '',
//       payment_date: '',
//       paid_amount: '',
//       rounding_amount: '',
//       payment_card_primary_account_number: '',
//       expiry_date: '',
//       cvv: '',

//       // Additional fields
//       invoice_transaction_type_code: '00000000',
//       tax_scheme_code: '',
//       scheme_identifier_electronic_address: '',
//       credit_transfer: '',
//       invoiced_quantity_unit_code: '',

//       // New fields for Principal ID and Transaction Types
//       principal_id: '',
//       transactionTypes: [
//         { label: 'Free Trade Zone', selected: false },
//         { label: 'Deemed Supply', selected: false },
//         { label: 'Margin Scheme', selected: false },
//         { label: 'Summary Invoice', selected: false },
//         { label: 'Continuous Supply', selected: false },
//         { label: 'Disclosed Agent Billing', selected: false },
//         { label: 'Supply through E-commerce', selected: false },
//         { label: 'Exports', selected: false }
//       ],

//       // NEW: Summary Invoice Date Range Fields
//       summary_invoice_start_date: '',
//       summary_invoice_end_date: '',

//       // NEW: Delivery-related fields
//       deliver_to_address_line_1: '',
//       deliver_to_address_line_2: '',
//       deliver_to_address_line_3: '',
//       deliver_to_post_code: '',
//       deliver_to_country_code: '',
//       deliver_to_country_subdivision: '',
//       deliver_to_city: '',
//       deliver_to_party_name: '',
//       deliver_to_location_identifier: '',
//       location_scheme_identifier: '',
//       actual_delivery_date: '',

//       // Arrays
//       invoice_lines: [],
//       tax_breakdowns: [],
//       payment_details: []
//     },
//     invoiceLoaded: false
//   }),

//   actions: {
//     async loadInvoiceForEdit(id) {
//       if (this.invoiceLoaded) return

//       try {
//         const resp = await axios.get(`/api/invoice/${id}`)
//         const serverData = resp.data.data

//         const invoiceLines = serverData.lines || []
//         const paymentDetails = serverData.payments || []

//         const transformedData = {
//           ...serverData,
//           invoice_lines: invoiceLines,
//           payment_details: paymentDetails,
//           principal_id: serverData.principal_id || '',
//           transactionTypes: serverData.transactionTypes || [
//             { label: 'Free Trade Zone', selected: false },
//             { label: 'Deemed Supply', selected: false },
//             { label: 'Margin Scheme', selected: false },
//             { label: 'Summary Invoice', selected: false },
//             { label: 'Continuous Supply', selected: false },
//             { label: 'Disclosed Agent Billing', selected: false },
//             { label: 'Supply through E-commerce', selected: false },
//             { label: 'Exports', selected: false }
//           ],
//           summary_invoice_start_date: serverData.summary_invoice_start_date || '',
//           summary_invoice_end_date: serverData.summary_invoice_end_date || '',

//           // Delivery fields fallback if not sent from server
//           deliver_to_address_line_1: serverData.deliver_to_address_line_1 || '',
//           deliver_to_address_line_2: serverData.deliver_to_address_line_2 || '',
//           deliver_to_address_line_3: serverData.deliver_to_address_line_3 || '',
//           deliver_to_post_code: serverData.deliver_to_post_code || '',
//           deliver_to_country_code: serverData.deliver_to_country_code || '',
//           deliver_to_country_subdivision: serverData.deliver_to_country_subdivision || '',
//           deliver_to_city: serverData.deliver_to_city || '',
//           deliver_to_party_name: serverData.deliver_to_party_name || '',
//           deliver_to_location_identifier: serverData.deliver_to_location_identifier || '',
//           location_scheme_identifier: serverData.scheme_identifier || '',
//           actual_delivery_date: serverData.actual_delivery_date || ''
//         }

//         if (paymentDetails.length > 0) {
//           const firstPayment = paymentDetails[0]
//           let typeCode = firstPayment.payment_means_type_code
//           if (typeCode === 'cash') {
//             typeCode = '97'
//           }
//           transformedData.payment_means_type_code = typeCode || ''
//           transformedData.payment_date = firstPayment.payment_date || ''
//           transformedData.payment_account_identifier = firstPayment.payment_account_identifier || ''
//           transformedData.payment_account_name = firstPayment.payment_account_name || ''
//           transformedData.paid_amount = firstPayment.paid_amount || ''
//           transformedData.rounding_amount = firstPayment.rounding_amount || ''
//           transformedData.payment_card_primary_account_number = firstPayment.payment_card_primary_account_number || ''
//           transformedData.expiry_date = firstPayment.expiry_date || ''
//           transformedData.cvv = ''
//         }

//         this.invoiceData = transformedData
//         this.invoiceLoaded = true

//       } catch (err) {
//         console.error('Error fetching invoice for edit:', err)
//         throw err
//       }
//     },

//     updateField(field, value) {
//       this.invoiceData[field] = value
//     },

//     resetInvoiceData() {
//       this.invoiceData = {
//         invoice_issue_date: '',
//         invoice_type_code: '',
//         invoice_currency_code: '',
//         payment_currency_code: '',
//         tax_registration_identifier: '',
//         invoice_total_line_net_amount: 0,
//         invoice_total_tax_amount: 0,
//         invoice_total_with_tax: 0,
//         invoice_due_for_payment: 0,
//         payment_due_date: '',
//         business_process_type: '',
//         specification_identifier: '',
//         currency_exchange_rate: null,
//         invoice_total_tax_amount_acc_currency: 0,
//         status: '',
//         seller_id: null,
//         buyer_id: null,

//         payment_means_type_code: '',
//         payment_account_identifier: '',
//         payment_account_name: '',
//         payment_date: '',
//         paid_amount: '',
//         rounding_amount: '',
//         payment_card_primary_account_number: '',
//         expiry_date: '',
//         cvv: '',

//         invoice_transaction_type_code: '00000000',
//         tax_scheme_code: '',
//         scheme_identifier_electronic_address: '',
//         credit_transfer: '',
//         invoiced_quantity_unit_code: '',

//         principal_id: '',
//         transactionTypes: [
//           { label: 'Free Trade Zone', selected: false },
//           { label: 'Deemed Supply', selected: false },
//           { label: 'Margin Scheme', selected: false },
//           { label: 'Summary Invoice', selected: false },
//           { label: 'Continuous Supply', selected: false },
//           { label: 'Disclosed Agent Billing', selected: false },
//           { label: 'Supply through E-commerce', selected: false },
//           { label: 'Exports', selected: false }
//         ],

//         summary_invoice_start_date: '',
//         summary_invoice_end_date: '',

//         // Reset delivery fields
//         deliver_to_address_line_1: '',
//         deliver_to_address_line_2: '',
//         deliver_to_address_line_3: '',
//         deliver_to_post_code: '',
//         deliver_to_country_code: '',
//         deliver_to_country_subdivision: '',
//         deliver_to_city: '',
//         deliver_to_party_name: '',
//         deliver_to_location_identifier: '',
//         location_scheme_identifier: '',
//         actual_delivery_date: '',

//         invoice_lines: [],
//         tax_breakdowns: [],
//         payment_details: []
//       }
//       this.invoiceLoaded = false
//     }
//   }
// })